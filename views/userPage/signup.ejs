<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="/css/auth.css">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Modal styles */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background: white;
    padding: 2rem;
    border-radius: 10px;
    width: 90%;
    max-width: 400px;
    text-align: center;
}

.otp-inputs {
    display: flex;
    gap: 8px;
    justify-content: center;
    margin: 20px 0;
}

.otp-input {
    width: 40px;
    height: 40px;
    text-align: center;
    border: 2px solid #ddd;
    border-radius: 8px;
    font-size: 1.2rem;
}

.verify-btn {
    width: 100%;
    padding: 12px;
    background: #4F46E5;
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    margin-top: 20px;
}

.resend-container {
    margin-top: 20px;
    text-align: center;
}

.error-message {
    color: #dc2626;
    margin: 10px 0;
    font-size: 0.875rem;
}

.hidden {
    display: none !important; 
}
    </style>
</head>
    <div class="container">
        <div class="form-container">
            <h2>Create Account</h2>
            <% if (locals.error) { %>
                <div class="alert alert-danger"><%= error %></div>
            <% } %>
            <form id="signupForm" action="/user/signup" method="POST">
                <div class="form-group">
                    <div class="input-field">
                        <i class="fas fa-user"></i>
                        <input type="text" id="name" name="name" placeholder="Full Name">
                    </div>
                    <span class="error" id="nameError"></span>
                </div>

                <div class="form-group">
                    <div class="input-field">
                        <i class="fas fa-envelope"></i>
                        <input type="email" id="email" name="email" placeholder="Email">
                    </div>
                    <span class="error" id="emailError"></span>
                </div>

                <div class="form-group">
                    <div class="input-field">
                        <i class="fas fa-phone"></i>
                        <input type="tel" id="mobile" name="mobile" placeholder="Mobile Number">
                    </div>
                    <span class="error" id="mobileError"></span>
                </div>

                <div class="form-group">
                    <div class="input-field">
                        <i class="fas fa-lock"></i>
                        <input type="password" id="password" name="password" placeholder="Password">
                        <i class="fas fa-eye-slash toggle-password"></i>
                    </div>
                    <span class="error" id="passwordError"></span>
                </div>

                <div class="form-group">
                    <div class="input-field">
                        <i class="fas fa-lock"></i>
                        <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm Password">
                        <i class="fas fa-eye-slash toggle-password"></i>
                    </div>
                    <span class="error" id="confirmPasswordError"></span>
                </div>

                <button type="submit" class="submit-btn">Sign Up</button>
            </form>
            <div class="switch-form">
                Already have an account? <a href="/user/login">Login</a>
            </div>
        </div>
    </div>
<!-- Add this right after your form container div -->
<div id="otpModal" class="modal hidden">
    <div class="modal-content">
        <h3>Enter OTP</h3>
        <p>Please enter the OTP sent to your email</p>

        <div id="otpError" class="error-message hidden"></div>

        <div class="otp-inputs">
            <input type="text" maxlength="1" class="otp-input" />
            <input type="text" maxlength="1" class="otp-input" />
            <input type="text" maxlength="1" class="otp-input" />
            <input type="text" maxlength="1" class="otp-input" />
            <input type="text" maxlength="1" class="otp-input" />
            <input type="text" maxlength="1" class="otp-input" />
        </div>

        <button id="verifyOtp" class="verify-btn">Verify OTP</button>

        <div class="resend-container">
            <button id="resendOtp" class="resend-btn">Resend OTP</button>
            <div id="resendTimer" class="timer hidden"></div>
            <div id="resendMessage" class="message hidden"></div>
        </div>

        <div id="otp-loading-spinner" class="spinner hidden">
            <div class="spinner-content">
                <div class="spinner-circle"></div>
                <p>Verifying OTP...</p>
            </div>
        </div>
    </div>
</div>
    <script src="/js/auth.js"></script>
    <script> 
        //  -->
      // Handle signup form submission
signupForm.addEventListener('submit', async function(e) {
    e.preventDefault();

    if (!validateForm()) {
        return;
    }

    try {
        const formData = {
            name: document.getElementById('name').value.trim(),
            email: document.getElementById('email').value.trim(),
            mobile: document.getElementById('mobile').value.trim(),
            password: document.getElementById('password').value
        };

        console.log('Sending form data:', formData); // Debug log

        const response = await fetch('/user/signup', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });

        const data = await response.json();
        console.log('Response:', data); // Debug log

        if (data.success) {
            // Show OTP modal
            const otpModal = document.getElementById('otpModal');
            otpModal.classList.remove('hidden');
            otpModal.classList.add('flex');
            
            // Focus on first OTP input
            const firstOtpInput = document.querySelector('.otp-input');
            if (firstOtpInput) {
                firstOtpInput.focus();
            }

            // Start the timer
            startTimer();
        } else {
            showError('generalError', data.message || 'Signup failed');
        }
    } catch (error) {
        console.error('Signup error:', error);
        showError('generalError', 'An error occurred during signup');
    }
});

// Update OTP input handling
document.querySelectorAll('.otp-input').forEach((input, index, inputs) => {
    input.addEventListener('keyup', (e) => {
        // Allow only numbers
        input.value = input.value.replace(/[^0-9]/g, '');

        // Move to next input if value is entered
        if (input.value && index < inputs.length - 1) {
            inputs[index + 1].focus();
        }

        // Move to previous input on backspace if empty
        if (e.key === 'Backspace' && !input.value && index > 0) {
            inputs[index - 1].focus();
        }

        // Check if all inputs are filled
        const allFilled = Array.from(inputs).every(input => input.value.length === 1);
        if (allFilled) {
            document.getElementById('verifyOtp').focus();
        }
    });

    // Handle paste event
    input.addEventListener('paste', (e) => {
        e.preventDefault();
        const pastedData = e.clipboardData.getData('text').slice(0, 6);
        if (/^\d+$/.test(pastedData)) {
            [...pastedData].forEach((digit, i) => {
                if (inputs[i]) {
                    inputs[i].value = digit;
                }
            });
            if (inputs[5]) inputs[5].focus();
        }
    });
});

// Verify OTP button handler
document.getElementById('verifyOtp').addEventListener('click', async () => {
    const otp = Array.from(document.querySelectorAll('.otp-input'))
        .map(input => input.value)
        .join('');

    if (otp.length !== 6) {
        showError('otpError', 'Please enter a valid 6-digit OTP');
        return;
    }

    try {
        const spinner = document.getElementById('otp-loading-spinner');
        spinner.classList.remove('hidden');

        const response = await fetch('/user/verify-otp', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ otp })
        });

        const data = await response.json();

        if (data.success) {
            window.location.href = data.redirectUrl || '/home';
        } else {
            showError('otpError', data.message || 'Invalid OTP');
        }
    } catch (error) {
        console.error('OTP verification error:', error);
        showError('otpError', 'An error occurred during verification');
    } finally {
        document.getElementById('otp-loading-spinner').classList.add('hidden');
    }
});

// Timer function
function startTimer() {
    let timeLeft = 120; // 2 minutes
    const timerDisplay = document.getElementById('resendTimer');
    const resendButton = document.getElementById('resendOtp');
    
    resendButton.disabled = true;
    timerDisplay.classList.remove('hidden');
    
    const timer = setInterval(() => {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        
        timerDisplay.textContent = `Resend OTP in ${minutes}:${seconds.toString().padStart(2, '0')}`;
        
        if (timeLeft <= 0) {
            clearInterval(timer);
            timerDisplay.classList.add('hidden');
            resendButton.disabled = false;
        }
        
        timeLeft--;
    }, 1000);
}

// Error display function
function showError(elementId, message) {
    const element = document.getElementById(elementId);
    if (element) {
        element.textContent = message;
        element.classList.remove('hidden');
    }
}
    </script>
</html>

